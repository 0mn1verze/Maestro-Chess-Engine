#ifndef EVAL_HPP
#define EVAL_HPP

#include "defs.hpp"
#include "position.hpp"

constexpr Score pieceBonus[PIECE_TYPE_N] = {
    SCORE_ZERO,    _S(164, 188),   _S(674, 562), _S(730, 594),
    _S(954, 1024), _S(2050, 1872), SCORE_ZERO,   SCORE_ZERO};

constexpr int gamePhaseInc[PIECE_TYPE_N] = {0, 0, 1, 1, 2, 4, 0, 0};

constexpr Score bonus[PIECE_TYPE_N][SQ_N] = {
    {},
    {
        _S(0, 0),     _S(0, 0),     _S(0, 0),     _S(0, 0),     _S(0, 0),
        _S(0, 0),     _S(0, 0),     _S(0, 0),     _S(-70, 26),  _S(-2, 16),
        _S(-40, 16),  _S(-46, 20),  _S(-30, 26),  _S(48, 0),    _S(76, 4),
        _S(-44, -14), _S(-52, 8),   _S(-8, 14),   _S(-8, -12),  _S(-20, 2),
        _S(6, 0),     _S(6, -10),   _S(66, -2),   _S(-24, -16), _S(-54, 26),
        _S(-4, 18),   _S(-10, -6),  _S(24, -14),  _S(34, -14),  _S(12, -16),
        _S(20, 6),    _S(-50, -2),  _S(-28, 64),  _S(26, 48),   _S(12, 26),
        _S(42, 10),   _S(46, -4),   _S(24, 8),    _S(34, 34),   _S(-46, 34),
        _S(-12, 188), _S(14, 200),  _S(52, 170),  _S(62, 134),  _S(130, 112),
        _S(112, 106), _S(50, 164),  _S(-40, 168), _S(196, 356), _S(268, 346),
        _S(122, 316), _S(190, 268), _S(136, 294), _S(252, 264), _S(68, 330),
        _S(-22, 374), _S(0, 0),     _S(0, 0),     _S(0, 0),     _S(0, 0),
        _S(0, 0),     _S(0, 0),     _S(0, 0),     _S(0, 0),
    }, // Pawn
    {
        _S(-210, -58),  _S(-42, -102), _S(-116, -46), _S(-66, -30),
        _S(-34, -44),   _S(-56, -36),  _S(-38, -100), _S(-46, -128),
        _S(-58, -84),   _S(-106, -40), _S(-24, -20),  _S(-6, -10),
        _S(-2, -4),     _S(36, -40),   _S(-28, -46),  _S(-38, -88),
        _S(-46, -46),   _S(-18, -6),   _S(24, -2),    _S(20, 30),
        _S(38, 20),     _S(34, -6),    _S(50, -40),   _S(-32, -44),
        _S(-26, -36),   _S(8, -12),    _S(32, 32),    _S(26, 50),
        _S(56, 32),     _S(38, 34),    _S(42, 8),     _S(-16, -36),
        _S(-18, -34),   _S(34, 6),     _S(38, 44),    _S(106, 44),
        _S(74, 44),     _S(138, 22),   _S(36, 16),    _S(44, -36),
        _S(-94, -48),   _S(120, -40),  _S(74, 20),    _S(130, 18),
        _S(168, -2),    _S(258, -18),  _S(146, -38),  _S(88, -82),
        _S(-146, -50),  _S(-82, -16),  _S(144, -50),  _S(72, -4),
        _S(46, -18),    _S(124, -50),  _S(14, -48),   _S(-34, -104),
        _S(-334, -116), _S(-178, -76), _S(-68, -26),  _S(-98, -56),
        _S(122, -62),   _S(-194, -54), _S(-30, -126), _S(-214, -198),
    }, // Knight
    {
        _S(-58, -28), _S(8, -42),   _S(-164, -22), _S(-74, -16), _S(-50, -14),
        _S(-84, -18), _S(14, -34),  _S(-16, -48),  _S(-52, -16), _S(32, -8),
        _S(-36, 14),  _S(-26, -24), _S(60, -6),    _S(118, -26), _S(36, -8),
        _S(-94, -28), _S(-32, 4),   _S(74, -16),   _S(86, 0),    _S(80, -2),
        _S(70, -4),   _S(100, 12),  _S(74, 0),     _S(-4, 8),    _S(-8, -6),
        _S(10, 18),   _S(38, 24),   _S(100, 18),   _S(74, 28),   _S(74, 20),
        _S(14, 6),    _S(-4, 4),    _S(-12, -12),  _S(26, 6),    _S(26, 26),
        _S(52, 38),   _S(68, 14),   _S(24, 20),    _S(20, -6),   _S(8, -18),
        _S(0, -24),   _S(30, -6),   _S(30, 16),    _S(30, 20),   _S(28, 26),
        _S(54, 6),    _S(36, -14),  _S(20, -30),   _S(8, -28),   _S(30, -36),
        _S(32, -14),  _S(0, -2),    _S(14, 8),     _S(42, -18),  _S(66, -30),
        _S(2, -54),   _S(-66, -46), _S(-6, -18),   _S(-28, -46), _S(-42, -10),
        _S(-26, -18), _S(-24, -32), _S(-78, -10),  _S(-42, -34),
    }, // Bishop
    {
        _S(-66, -46), _S(-6, -18),  _S(-28, -46), _S(-42, -10),  _S(-26, -18),
        _S(-24, -32), _S(-78, -10), _S(-42, -34), _S(8, -28),    _S(30, -36),
        _S(32, -14),  _S(0, -2),    _S(14, 8),    _S(42, -18),   _S(66, -30),
        _S(2, -54),   _S(0, -24),   _S(30, -6),   _S(30, 16),    _S(30, 20),
        _S(28, 26),   _S(54, 6),    _S(36, -14),  _S(20, -30),   _S(-12, -12),
        _S(26, 6),    _S(26, 26),   _S(52, 38),   _S(68, 14),    _S(24, 20),
        _S(20, -6),   _S(8, -18),   _S(-8, -6),   _S(10, 18),    _S(38, 24),
        _S(100, 18),  _S(74, 28),   _S(74, 20),   _S(14, 6),     _S(-4, 4),
        _S(-32, 4),   _S(74, -16),  _S(86, 0),    _S(80, -2),    _S(70, -4),
        _S(100, 12),  _S(74, 0),    _S(-4, 8),    _S(-52, -16),  _S(32, -8),
        _S(-36, 14),  _S(-26, -24), _S(60, -6),   _S(118, -26),  _S(36, -8),
        _S(-94, -28), _S(-58, -28), _S(8, -42),   _S(-164, -22), _S(-74, -16),
        _S(-50, -14), _S(-84, -18), _S(14, -34),  _S(-16, -48),
    }, // Rook
    {
        _S(-38, -18), _S(-26, 4),   _S(2, 6),     _S(34, -2),   _S(32, -10),
        _S(14, -26),  _S(-74, 8),   _S(-52, -40), _S(-88, -12), _S(-32, -12),
        _S(-40, 0),   _S(-18, 4),   _S(-2, -18),  _S(22, -18),  _S(-12, -22),
        _S(-142, -6), _S(-90, -8),  _S(-50, 0),   _S(-32, -10), _S(-34, -2),
        _S(6, -14),   _S(0, -24),   _S(-10, -16), _S(-66, -32), _S(-72, 6),
        _S(-52, 10),  _S(-24, 16),  _S(-2, 8),    _S(18, -10),  _S(-14, -12),
        _S(12, -16),  _S(-46, -22), _S(-48, 8),   _S(-22, 6),   _S(14, 26),
        _S(52, 2),    _S(48, 4),    _S(70, 2),    _S(-16, -2),  _S(-40, 4),
        _S(-10, 14),  _S(38, 14),   _S(52, 14),   _S(72, 10),   _S(34, 8),
        _S(90, -6),   _S(122, -10), _S(32, -6),   _S(54, 22),   _S(64, 26),
        _S(116, 26),  _S(124, 22),  _S(160, -6),  _S(134, 6),   _S(52, 16),
        _S(88, 6),    _S(64, 26),   _S(84, 20),   _S(64, 36),   _S(102, 30),
        _S(126, 24),  _S(18, 24),   _S(62, 16),   _S(86, 10),
    }, // Queen
    {
        _S(-2, -66),  _S(-36, -56), _S(-18, -44),  _S(20, -86),  _S(-30, -10),
        _S(-50, -64), _S(-62, -40), _S(-100, -82), _S(-70, -44), _S(-16, -46),
        _S(22, -60),  _S(4, -32),   _S(16, -32),   _S(30, -46),  _S(-6, -72),
        _S(2, -64),   _S(-28, -32), _S(4, -54),    _S(-22, 30),  _S(-4, 12),
        _S(-10, 18),  _S(4, 34),    _S(28, 20),    _S(10, 10),   _S(-18, -36),
        _S(-52, 56),  _S(-18, 38),  _S(-20, 94),   _S(-4, 62),   _S(-8, 68),
        _S(6, 78),    _S(-6, 46),   _S(-54, 6),    _S(-54, 44),  _S(-32, 48),
        _S(-32, 90),  _S(-2, 114),  _S(34, 80),    _S(-4, 114),  _S(2, 72),
        _S(-26, -40), _S(-34, 12),  _S(14, 18),    _S(16, 98),   _S(58, 94),
        _S(112, 70),  _S(94, 38),   _S(114, 18),   _S(-48, -34), _S(-78, 40),
        _S(-10, 64),  _S(2, 82),    _S(-32, 116),  _S(114, 50),  _S(56, 60),
        _S(108, 0),   _S(-56, -18), _S(0, 44),     _S(58, 44),   _S(24, 54),
        _S(118, 54),  _S(88, 38),   _S(86, 20),    _S(90, 40),
    }, // King
    {
        _S(-30, -106),  _S(72, -68),  _S(24, -42), _S(-108, -22),
        _S(16, -56),    _S(-56, -28), _S(48, -48), _S(28, -86),
        _S(2, -54),     _S(14, -22),  _S(-16, 8),  _S(-128, 26),
        _S(-86, 28),    _S(-32, 8),   _S(18, -10), _S(16, -34),
        _S(-28, -38),   _S(-28, -6),  _S(-44, 22), _S(-92, 42),
        _S(-88, 46),    _S(-60, 32),  _S(-30, 14), _S(-54, -18),
        _S(-98, -36),   _S(-2, -8),   _S(-54, 42), _S(-78, 48),
        _S(-92, 54),    _S(-88, 46),  _S(-66, 18), _S(-102, -22),
        _S(-34, -16),   _S(-40, 44),  _S(-24, 48), _S(-54, 54),
        _S(-60, 52),    _S(-50, 66),  _S(-28, 52), _S(-72, 6),
        _S(-18, 20),    _S(48, 34),   _S(4, 46),   _S(-32, 30),
        _S(-40, 40),    _S(12, 90),   _S(44, 88),  _S(-44, 26),
        _S(58, -24),    _S(-2, 34),   _S(-40, 28), _S(-14, 34),
        _S(-16, 34),    _S(-8, 76),   _S(-76, 46), _S(-58, 22),
        _S(-130, -148), _S(46, -70),  _S(32, -36), _S(-30, -36),
        _S(-112, -22),  _S(-68, 30),  _S(4, 8),    _S(26, -34),
    }};

extern Score psqt[PIECE_N][SQ_N];

void initEval();

Value eval(const Position &pos);

int toNNUEPiece(Piece piece);

#endif // EVAL_HPP